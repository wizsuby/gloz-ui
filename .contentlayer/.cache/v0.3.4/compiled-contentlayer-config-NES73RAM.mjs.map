{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../lib/rehype-component.ts", "../../../components/__registry__/index.tsx"],
  "sourcesContent": ["\r\nimport {\r\n  defineDocumentType,\r\n  defineNestedType,\r\n  makeSource,\r\n} from \"contentlayer/source-files\"\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\r\nimport rehypePrettyCode from \"rehype-pretty-code\"\r\nimport rehypeSlug from \"rehype-slug\"\r\n\r\nimport remarkGfm from \"remark-gfm\"\r\n\r\n\r\nimport { rehypeComponent } from \"./lib/rehype-component\"\r\n// import { rehypeNpmCommand } from \"./lib/rehype-npm-command\"\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n}\r\n\r\nconst LinksProperties = defineNestedType(() => ({\r\n  name: \"LinksProperties\",\r\n  fields: {\r\n    doc: {\r\n      type: \"string\",\r\n    },\r\n    api: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n}))\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n  name: \"Doc\",\r\n  filePathPattern: `docs/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    links: {\r\n      type: \"nested\",\r\n      of: LinksProperties,\r\n    },\r\n    featured: {\r\n      type: \"boolean\",\r\n      default: false,\r\n      required: false,\r\n    },\r\n    component: {\r\n      type: \"boolean\",\r\n      default: false,\r\n      required: false,\r\n    },\r\n    toc: {\r\n      type: \"boolean\",\r\n      default: true,\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\n\r\n\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Doc],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      rehypeComponent,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: \"github-dark\",\r\n          onVisitLine(node) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n            // lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }]\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node) {\r\n            node.properties.className.push(\"line--highlighted\")\r\n          },\r\n          onVisitHighlightedWord(node) {\r\n            node.properties.className = [\"word--highlighted\"]\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: [\"subheading-anchor\"],\r\n            ariaLabel: \"Link to section\",\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n})\r\n", "import fs from \"fs\"\r\nimport path from \"path\"\r\nimport { UnistNode, UnistTree } from \"../types/unist\"\r\nimport { u } from \"unist-builder\"\r\nimport { visit } from \"unist-util-visit\"\r\n\r\nimport { Index } from \"../components/__registry__\"\r\n\r\n\r\n\r\nexport function rehypeComponent() {\r\n  return async (tree: UnistTree) => {\r\n    visit(tree, (node: UnistNode) => {\r\n      // src prop overrides both name and fileName.\r\n      const { value: srcPath } =\r\n        (getNodeAttributeByName(node, \"src\") as {\r\n          name: string\r\n          value?: string\r\n          type?: string\r\n        }) || {}\r\n\r\n      if (node.name === \"ComponentSource\") {\r\n        const name = getNodeAttributeByName(node, \"name\")?.value as string\r\n        const fileName = getNodeAttributeByName(node, \"fileName\")?.value as\r\n          | string\r\n          | undefined\r\n\r\n        if (!name && !srcPath) {\r\n          return null\r\n        }\r\n\r\n        try {\r\n          \r\n            let src: string\r\n\r\n            if (srcPath) {\r\n              src = srcPath\r\n            } else {\r\n              const component = Index['default'][name]\r\n              src = fileName\r\n                ? component.files.find((file: string) => {\r\n                    return (\r\n                      file.endsWith(`${fileName}.tsx`) ||\r\n                      file.endsWith(`${fileName}.ts`)\r\n                    )\r\n                  }) || component.files[0]\r\n                : component.files[0]\r\n            }\r\n\r\n            // Read the source file.\r\n            const filePath = path.join(process.cwd(), src)\r\n            let source = fs.readFileSync(filePath, \"utf8\")\r\n\r\n            // Replace imports.\r\n            // TODO: Use @swc/core and a visitor to replace this.\r\n            // For now a simple regex should do.\r\n            source = source.replaceAll(\r\n              `@/registry/${'default'}/`,\r\n              \"@/components/\"\r\n            )\r\n            source = source.replaceAll(\"export default\", \"export\")\r\n\r\n            // Add code as children so that rehype can take over at build time.\r\n            node.children?.push(\r\n              u(\"element\", {\r\n                tagName: \"pre\",\r\n                properties: {\r\n                  __src__: src,\r\n                  __style__: 'default',\r\n                },\r\n                attributes: [\r\n                  {\r\n                    name: \"styleName\",\r\n                    type: \"mdxJsxAttribute\",\r\n                    value: 'default',\r\n                  },\r\n                ],\r\n                children: [\r\n                  u(\"element\", {\r\n                    tagName: \"code\",\r\n                    properties: {\r\n                      className: [\"language-tsx\"],\r\n                    },\r\n                    children: [\r\n                      {\r\n                        type: \"text\",\r\n                        value: source,\r\n                      },\r\n                    ],\r\n                  }),\r\n                ],\r\n              })\r\n            )\r\n          \r\n        } catch (error) {\r\n          console.error(error)\r\n        }\r\n      }\r\n\r\n      if (node.name === \"ComponentPreview\") {\r\n        const name = getNodeAttributeByName(node, \"name\")?.value as string\r\n        if (!name) {\r\n          return null\r\n        }\r\n\r\n        try {\r\n          \r\n            const component = Index['default'][name]\r\n            const src = component.files[0]\r\n\r\n            // Read the source file.\r\n            const filePath = path.join(process.cwd(), src)\r\n            let source = fs.readFileSync(filePath, \"utf8\")\r\n\r\n            // Replace imports.\r\n            // TODO: Use @swc/core and a visitor to replace this.\r\n            // For now a simple regex should do.\r\n            source = source.replaceAll(\r\n              `@/registry/${'default'}/`,\r\n              \"@/components/\"\r\n            )\r\n            source = source.replaceAll(\"export default\", \"export\")\r\n\r\n            // Add code as children so that rehype can take over at build time.\r\n            node.children?.push(\r\n              u(\"element\", {\r\n                tagName: \"pre\",\r\n                properties: {\r\n                  __src__: src,\r\n                },\r\n                children: [\r\n                  u(\"element\", {\r\n                    tagName: \"code\",\r\n                    properties: {\r\n                      className: [\"language-tsx\"],\r\n                    },\r\n                    children: [\r\n                      {\r\n                        type: \"text\",\r\n                        value: source,\r\n                      },\r\n                    ],\r\n                  }),\r\n                ],\r\n              })\r\n            )\r\n          \r\n        } catch (error) {\r\n          console.error(error)\r\n        }\r\n      }\r\n\r\n      // if (node.name === \"ComponentExample\") {\r\n      //   const source = getComponentSourceFileContent(node)\r\n      //   if (!source) {\r\n      //     return\r\n      //   }\r\n\r\n      //   // Replace the Example component with a pre element.\r\n      //   node.children?.push(\r\n      //     u(\"element\", {\r\n      //       tagName: \"pre\",\r\n      //       properties: {\r\n      //         __src__: src,\r\n      //       },\r\n      //       children: [\r\n      //         u(\"element\", {\r\n      //           tagName: \"code\",\r\n      //           properties: {\r\n      //             className: [\"language-tsx\"],\r\n      //           },\r\n      //           children: [\r\n      //             {\r\n      //               type: \"text\",\r\n      //               value: source,\r\n      //             },\r\n      //           ],\r\n      //         }),\r\n      //       ],\r\n      //     })\r\n      //   )\r\n\r\n      //   const extractClassname = getNodeAttributeByName(\r\n      //     node,\r\n      //     \"extractClassname\"\r\n      //   )\r\n      //   if (\r\n      //     extractClassname &&\r\n      //     typeof extractClassname.value !== \"undefined\" &&\r\n      //     extractClassname.value !== \"false\"\r\n      //   ) {\r\n      //     // Extract className from string\r\n      //     // TODO: Use @swc/core and a visitor to extract this.\r\n      //     // For now, a simple regex should do.\r\n      //     const values = source.match(/className=\"(.*)\"/)\r\n      //     const className = values ? values[1] : \"\"\r\n\r\n      //     // Add the className as a jsx prop so we can pass it to the copy button.\r\n      //     node.attributes?.push({\r\n      //       name: \"extractedClassNames\",\r\n      //       type: \"mdxJsxAttribute\",\r\n      //       value: className,\r\n      //     })\r\n\r\n      //     // Add a pre element with the className only.\r\n      //     node.children?.push(\r\n      //       u(\"element\", {\r\n      //         tagName: \"pre\",\r\n      //         properties: {},\r\n      //         children: [\r\n      //           u(\"element\", {\r\n      //             tagName: \"code\",\r\n      //             properties: {\r\n      //               className: [\"language-tsx\"],\r\n      //             },\r\n      //             children: [\r\n      //               {\r\n      //                 type: \"text\",\r\n      //                 value: className,\r\n      //               },\r\n      //             ],\r\n      //           }),\r\n      //         ],\r\n      //       })\r\n      //     )\r\n      //   }\r\n      // }\r\n\r\n      // if (node.name === \"ComponentSource\") {\r\n      //   const source = getComponentSourceFileContent(node)\r\n      //   if (!source) {\r\n      //     return\r\n      //   }\r\n\r\n      //   // Replace the Source component with a pre element.\r\n      //   node.children?.push(\r\n      //     u(\"element\", {\r\n      //       tagName: \"pre\",\r\n      //       properties: {\r\n      //         __src__: src,\r\n      //       },\r\n      //       children: [\r\n      //         u(\"element\", {\r\n      //           tagName: \"code\",\r\n      //           properties: {\r\n      //             className: [\"language-tsx\"],\r\n      //           },\r\n      //           children: [\r\n      //             {\r\n      //               type: \"text\",\r\n      //               value: source,\r\n      //             },\r\n      //           ],\r\n      //         }),\r\n      //       ],\r\n      //     })\r\n      //   )\r\n      // }\r\n    })\r\n  }\r\n}\r\n\r\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\r\n  return node.attributes?.find((attribute) => attribute.name === name)\r\n}\r\n\r\nfunction getComponentSourceFileContent(node: UnistNode) {\r\n  const src = getNodeAttributeByName(node, \"src\")?.value as string\r\n\r\n  if (!src) {\r\n    return null\r\n  }\r\n\r\n  // Read the source file.\r\n  const filePath = path.join(process.cwd(), src)\r\n  const source = fs.readFileSync(filePath, \"utf8\")\r\n\r\n  return source\r\n}\r\n", "// @ts-nocheck\r\nimport React from \"react\";\r\n\r\nexport const Index: Record<string, any> = {\r\n    \"default\": {\r\n        \"accordion\": {\r\n          name: \"accordion\",\r\n          type: \"components:ui\",\r\n          registryDependencies: undefined,\r\n          component: React.lazy(() => import(\"@/components/ui/accordion\")),\r\n          files: [\"components/ui/accordion.tsx\"],\r\n        },\r\n        \"accordion-demo\": {\r\n          name: \"accordion-demo\",\r\n          type: \"components:example\",\r\n          registryDependencies: [\"accordion\"],\r\n          component: React.lazy(() => import(\"@/registry/default/example/accordion-demo\")),\r\n          files: [\"registry/default/example/accordion-demo.tsx\"],\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
